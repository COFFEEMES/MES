<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.spring.manager.mapper.ManagerMapper">
	<!-- 기초 코드 전체 조회 -->
	<select id="getAllBasicCode" resultType="BasicCodeVO">
		SELECT basic_code
			 , basic_name
		  FROM basic_code
		 ORDER BY basic_code
	</select>

	<!-- 상세 코드 조회 -->
	<select id="getDetailCode" resultType="DetailCodeVO">
		SELECT detail_code
			 , detail_name
			 , detail_explain
			 , detail_avail
		  FROM basic_code b, detail_code d
		 WHERE b.basic_code = d.basic_code
		   AND d.basic_code = #{basicCode}
		 ORDER BY detail_code
	</select>

	<!-- 공통 코드 추가 -->
	<insert id="insertBasicCode" parameterType="BasicCodeVO">
		INSERT INTO basic_code
		VALUES ( #{basicCode}, #{basicName} )
	</insert>

	<!-- 상세 코드 추가 or 수정 -->
	<update id="upsertDetailCode" statementType="CALLABLE" parameterType="DetailCodeVO">
		{ CALL upsert_detail_code(
			  #{detailCode}
			, #{basicCode}
			, #{detailName}
			, #{detailExplain}
			, #{detailAvail}
		  )
		}
	</update>

	<!-- 거래처 전체 조회 -->
	<select id="getAllVend" resultType="VendVO">
		SELECT *
		  FROM detail_code d, vend v, emp e
		 WHERE v.vend_cd = d.basic_code||d.detail_code
		   AND v.emp_code = e.emp_code
		   AND detail_avail = 'Y'
		 ORDER BY detail_code
	</select>
	
	<!-- 거래처 추가or수정 -->
	<update id="mergeVend" statementType="CALLABLE" parameterType="VendVO">
		{ CALL upsert_vend(
			  #{vendCd}
			, #{vendNm}
			, #{bizno}
			, #{telno}
			, #{vendAddr}
			, #{empCode}
			, #{vendTyp}
		  )
		}
	</update>
	
	<!-- 거래처 삭제 -->
	<update id="delVend" statementType="CALLABLE" parameterType="VendVO">
		UPDATE detail_code
		   SET detail_avail = 'N'
		 WHERE basic_code||detail_code = #{vendCd}
	</update>
	
	<!-- 담당사원 검색 -->
	<select id="getEmpList" resultType="EmpVO">
		SELECT *
		  FROM emp e, detail_code d
		 WHERE e.emp_code = d.basic_code||d.detail_code
		   AND d.detail_avail = 'Y'
	</select>
	
	<!-- 자재 전체 조회 -->
	<select id="getAllMat" resultType="DetailCodeVO">
		SELECT *
		  FROM detail_code
		 WHERE basic_code = 'RSC'
		   AND detail_avail = 'Y'
		 ORDER BY detail_code
	</select>
	
	<!-- 자재 구분 조회 -->
	<select id="getMatType" resultType="DetailCodeVO">
		SELECT DISTINCT(detail_name)
			 , SUBSTR(detail_code, 1, LENGTH(detail_code) - 3) detail_code
		  FROM detail_code
		 WHERE basic_code = 'RSC'
		 ORDER BY 1
	</select>
	
	<!-- 자재 상세 정보 조회 -->
	<select id="getRsc" resultType="RscVO">
		SELECT *
		  FROM rsc r, detail_code d
		 WHERE r.rsc_cd = d.full_code
		   AND d.detail_avail = 'Y'
		   AND rsc_cd = #{rscCd}
		 ORDER BY rsc_cd
	</select>
	
	<!-- 자재 상세 정보 추가/수정 -->
	<update id="mergeRsc" statementType="CALLABLE" parameterType="RscVO">
		{ CALL merge_rsc(
			  #{rscCd}
			, #{rscNm}
			, #{rscTyp}
			, #{rscSpec}
			, #{rscUnit}
			, #{safRtc}
			, #{rscAvail}
			, #{hInput}
		  )
		}
	</update>
	
	<!-- 자재 삭제 -->
	<update id="delRsc" parameterType="RscVO">
		UPDATE detail_code
		   SET detail_avail = 'N'
		 WHERE basic_code||detail_code = #{rscCd}
	</update>
	
	<!-- 제품 전체 조회 -->
	<select id="getAllPro" resultType="DetailCodeVO">
		SELECT *
		  FROM detail_code d, edcts e
		 WHERE d.full_code = e.pro_cd
		   AND basic_code = 'PRO'
		   AND detail_avail = 'Y'
		 ORDER BY detail_code
	</select>
	
	<!-- 제품 상세 조회 -->
	<select id="getPro" resultType="EdctsVO">
		SELECT e.pro_cd
			 , e.pro_nm
			 , e.pro_spec
			 , e.pro_unit
			 , e.saf_rtc
			 , b.unit
		  FROM edcts e, bom b
		 WHERE e.pro_cd = b.pro_cd(+)
		   AND e.pro_cd = #{proCd}
		 GROUP BY e.pro_cd
				, e.pro_nm
				, e.pro_spec
				, e.pro_unit
				, e.saf_rtc
				, b.unit
		 ORDER BY e.pro_cd
	</select>
	
	<!-- 제품 상세 정보 추가/수정 -->
	<update id="mergePro" statementType="CALLABLE" parameterType="RscVO">
		{ CALL merge_pro(
			  #{proCd}
			, #{proNm}
			, #{proSpec}
			, #{proUnit}
			, #{safRtc}
			, #{proTyp}
			, #{unit}
		  )
		}
	</update>
	
	<!-- 제품 삭제 -->
	<update id="delPro" parameterType="EdctsVO">
		UPDATE detail_code
		   SET detail_avail = 'N'
		 WHERE basic_code||detail_code = #{proCd}
	</update>
	
	<!-- 공정 순서 조회 -->
	<select id="getPrcs" resultType="BomVO">
		SELECT b.bom_sq
			 , b.prcs_cd
			 , p.prcs_nm
			 , p.prcs_explain
		  FROM bom b, prcs p, detail_code d
		 WHERE b.prcs_cd = p.prcs_cd
		   AND p.prcs_cd = d.full_code
		   AND d.detail_avail = 'Y'
		   AND b.pro_cd = #{proCd}
		 GROUP BY b.bom_sq, b.prcs_cd, p.prcs_nm, p.prcs_explain
		 ORDER BY b.bom_sq
	</select>
	
	<!-- BOM 필요 자재 조회 -->
	<select id="getUseRsc" resultType="BomVO">
		SELECT b.rsc_cd
			 , r.rsc_nm
			 , b.use_cnt
			 , r.rsc_unit
			 , p.prcs_nm
		  FROM bom b, rsc r, prcs p, detail_code d1, detail_code d2
		 WHERE b.rsc_cd = r.rsc_cd
		   AND r.rsc_cd = d1.full_code
		   AND d1.detail_avail = 'Y'
		   AND b.prcs_cd = p.prcs_cd
		   AND p.prcs_cd = d2.full_code
		   AND d2.detail_avail = 'Y'
		   AND b.pro_cd = #{proCd}
		   AND r.rsc_cd != 'RSCNOT001'
		 ORDER BY b.bom_sq
	</select>
	
	<!-- 공정별 필요 자재 조회 -->
	<select id="getPrcsRsc" resultType="BomVO">
		SELECT b.rsc_cd
			 , r.rsc_nm
			 , b.use_cnt
			 , r.rsc_unit
		  FROM bom b, rsc r, detail_code d
		 WHERE b.rsc_cd = r.rsc_cd
		   AND r.rsc_cd = d.full_code
		   AND d.detail_avail = 'Y'
		   AND b.pro_cd = #{proCd}
		   AND b.prcs_cd = #{prcsCd}
		 ORDER BY 1
	</select>
	
	<!-- 공정 삭제 -->
	<update id="delPrsc" statementType="CALLABLE" parameterType="BomVO">
		{ CALL del_prcs(
			  #{proCd}
			, #{prcsCd}
		  )
		}
	</update>
	
	<!-- 공정 설명 수정/저장 -->
	<update id="savePrcs" parameterType="BomVO">
		UPDATE prcs
		   SET prcs_explain = #{prcsExplain}
		 WHERE prcs_cd = #{prcsCd}
	</update>
	
	<!-- 공정 전체 조회 -->
	<select id="getAllPrcs" resultType="PrcsVO">
		SELECT *
		  FROM prcs p, detail_code d
		 WHERE p.prcs_cd = d.full_code
		   AND d.detail_avail = 'Y'
		 ORDER BY prcs_cd
	</select>
	
	<!-- 자재 전체 조회 -->
	<select id="getAllRsc" resultType="RscVO">
		SELECT *
		  FROM rsc r, detail_code d
		 WHERE r.rsc_cd = d.full_code
		   AND d.detail_avail = 'Y'
		 ORDER BY rsc_cd
	</select>
	
	<!-- 새 공정 추가 -->
	<update id="saveNewPrcs" statementType="CALLABLE" parameterType="RscVO">
		{ CALL insert_bom(
			  #{proCd}
			, #{rscCd}
			, #{unit}
			, #{useCnt}
			, #{prcsCd}
		  )
		}
	</update>

</mapper>